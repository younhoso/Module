/**========= 접두어 SYSTEM ========= */
@mixin vendorPrefix1($property, $value) {
    @each $prefix in -webkit-, -moz-, -ms-, -o-, '' {
        #{$prefix}#{$property}: $value;
    }
}
@mixin vendorPrefix2($property, $value, $value2, $value3) {
    @each $prefix in -webkit-, -moz-, -ms-, -o-, '' {
        #{$prefix}#{$property}: $value $value2 $value3;
    }
}
@mixin vendorPrefix3($property, $value, $value2, $value3, $value4) {
    @each $prefix in -webkit-, -moz-, -ms-, -o-, '' {
        #{$prefix}#{$property}: $value $value2 $value3 $value4;
    }
}


/**========= position absolute 함수 ========= */
@mixin position-absolute($top:null, $right:null, $bottom:null, $left:null){
  $top: (t);
  $right: (r);
  $bottom: (b);
  $left: (l); 
  $number: 500; /* ==== 몇번 반복할것인지 횟를 정의한 변수. ==== */

  /* absolute를 부모에게 가두기 위한 용도. 필요할때만 사용한다.*/
  .position_relative { position: relative; }

  [class*="p_ab-"]{
     position: absolute;
  }

  @for $i from 1 through $number {
    @each $key, $value in $top {
      .p_ab-#{$key}-#{$i} { top: 0px + $i  }
    }
  }

  @for $i from 1 through $number {
    @each $key, $value in $right {
      .p_ab-#{$key}-#{$i} { right: 0px + $i  }
    }
  }

  @for $i from 1 through $number {
    @each $key, $value in $bottom {
      .p_ab-#{$key}-#{$i} { bottom: 0px + $i  }
    }
  }

  @for $i from 1 through $number {
    @each $key, $value in $left {
      .p_ab-#{$key}-#{$i} { left: 0px + $i  }
    }
  }
}

/**========= position fixed 함수 ========= */
@mixin position-fixed($top:null, $right:null, $bottom:null, $left:null){
  $top: (t);
  $right: (r);
  $bottom: (b);
  $left: (l); 
  $number: 500; /* ==== 몇번 반복할것인지 횟를 정의한 변수. ==== */
  [class*="p_fi-"]{
    position: fixed;
  }

  @for $i from 0 through $number {
    @each $key, $value in $top {
      .p_fi-#{$key}-#{$i} { top: 0px + $i  }
    }
  }

  @for $i from 0 through $number {
    @each $key, $value in $right {
      .p_fi-#{$key}-#{$i} { right: 0px + $i  }
    }
  }

  @for $i from 0 through $number {
    @each $key, $value in $bottom {
      .p_fi-#{$key}-#{$i} { bottom: 0px + $i  }
    }
  }

  @for $i from 0 through $number {
    @each $key, $value in $left {
      .p_fi-#{$key}-#{$i} { left: 0px + $i  }
    }
  }
}


/**========= padding 함수 SYSTEM ========= */
@mixin padding($top:null, $right:null, $bottom:null, $left:null){
  $top: (t);
  $right: (r);
  $bottom: (b);
  $left: (l);
  $number: 500; /* ==== 몇번 반복할것인지 횟를 정의한 변수. ==== */

  [class*="p_"]{
    box-sizing:border-box;
    -webkit-box-sizing:border-box;
  }


  @for $i from 1 through $number {
    @each $key, $value in $top {
      .p_#{$key}-#{$i} { padding-top: 1px * $i  }
    }
  }

  @for $i from 1 through $number {
    @each $key, $value in $bottom {
      .p_#{$key}-#{$i} { padding-bottom: 1px * $i  }
    }
  }

  @for $i from 1 through $number {
    @each $key, $value in $right {
      .p_#{$key}-#{$i} { padding-right: 1px * $i  }
    }
  }

  @for $i from 1 through $number {
    @each $key, $value in $left {
      .p_#{$key}-#{$i} { padding-left: 1px * $i  }
    }
  }
}

/**========= margin 함수 SYSTEM ========= */
@mixin margin($top:null, $right:null, $bottom:null, $left:null){
  $top: (t);
  $right: (r);
  $bottom: (b);
  $left: (l);
  $number: 900; /* ==== 몇번 반복할것인지 횟를 정의한 변수. ==== */

  /*마진 겹칩을 해결하기 위함. 필요할때만 사용한다.*/
  .m_overlap-border{
    border: 1px solid transparent;
  }
 
  /* margin - top */
  @for $i from 1 through $number {
    @each $key, $value in $top {
      .m_#{$key}-#{$i} { margin-top: 0px + $i }
    }
  }
  @for $i from 1 through $number {
    @each $key, $value in $top {
      .m_#{$key}--#{$i} { margin-top: 0px - $i  }
    }
  }

   /* margin - right */
  @for $i from 1 through $number {
    @each $key, $value in $right {
      .m_#{$key}-#{$i} { margin-right: 0px + $i  }
    }
  }
  @for $i from 1 through $number {
    @each $key, $value in $right {
      .m_#{$key}--#{$i} { margin-right: 0px - $i  }
    }
  }

  /* margin - bottom */
  @for $i from 1 through $number {
    @each $key, $value in $bottom {
      .m_#{$key}-#{$i} { margin-bottom: 0px + $i  }
    }
  }
  @for $i from 1 through $number {
    @each $key, $value in $bottom {
      .m_#{$key}--#{$i} { margin-bottom: 0px - $i  }
    }
  }

  /* margin - left */
  @for $i from 1 through $number {
    @each $key, $value in $left {
      .m_#{$key}-#{$i} { margin-left: 0px + $i  }
    }
  }
  @for $i from 1 through $number {
    @each $key, $value in $left {
      .m_#{$key}--#{$i} { margin-left: 0px - $i  }
    }
  }
}


/**========= position 함수(sass 에서 직접 커스텀 바이즈 할때 사용하는 함수) ========= */
@mixin position($position, $top: null, $right: null, $bottom: null, $left: null) {
  position: $position;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}
/**========= position absolute 함수 ========= */
@mixin absolute($args...) {
  @include position(absolute, $args...);
}
/**========= position relative 함수 ========= */
@mixin relative($args...) {
  @include position(relative, $args...);
}
/**========= position fixed 함수 ========= */
@mixin fixed($args...) {
  @include position(fixed, $args...);
}

/**========= 배열에 있는 칼라들 클랙스명으로 정의해놓기 ========= */
$grey-lighten : #fafafa #f5f5f5 #eeeeee #e0e0e0 #bdbdbd #9e9e9e;
$grey-darken : #757575 #616161 #424242 #333;
@for $i from 1 through 6{
  .grey__color-lighten-#{$i} {color: nth($grey-lighten, $i)}
}

@for $i from 1 through 4{
  .grey__color-darken-#{$i} {color: nth($grey-darken, $i)}
}


/**========= TITLE font-size SYSTEM ========= */
html {font-size: 10px;}
p,li,td,th,strong { /*본문글씨 기본 크기 16px*/
  font-size: 1.6rem;
  font-weight: normal;
  vertical-align: top;
  letter-spacing: -0.025em;
}
p,td {line-height: 1.6;}
[class*="tit_"]{ 
    line-height:1.4;
}
@for $i from 11 through 60 {
    // 최신 브라우저 단에서 폰트 사이즈 10px이하는 안먹는다.
    $fontsize: 0.1 * $i; 
    .tit_#{$i}{
        font-size: #{$fontsize + 0rem};
    }
}